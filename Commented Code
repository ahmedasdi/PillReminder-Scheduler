#include <p32xxxx.h>
#include <plib.h>
#include "OledDriver.h"
#include <inttypes.h>
#include "delay.h"


#pragma config IESO		= OFF		// Internal/external clock switchover
#pragma config FCKSM		= CSDCMD	// Clock switching (CSx)/Clock monitor (CMx)
#pragma config OSCIOFNC		= OFF		// Clock output on OSCO pin enable

#pragma config WDTPS		= PS1024	// Watchdog timer postscaler

#pragma config CP		= OFF		// Code protection
#pragma config BWP		= OFF		// Boot flash write protect
#pragma config PWP		= OFF		// Program flash write protect



#define	fTrue	1
#define fFalse	0

#define cbPageMax	256

#define _BOARD_UC32_ 1      // this is the board we use.
#define	cntMsDelay	10000			//timer 1 delay for 1ms


#if defined (__32MX340F512H__)

#pragma config FPLLMUL = MUL_20, FPLLIDIV = DIV_2, FPLLODIV = DIV_1, FWDTEN = OFF
#pragma config POSCMOD = HS, FNOSC = PRIPLL, FPBDIV = DIV_1
#define SYS_FREQ (80000000L)
#endif



#define	GetPeripheralClock()		(SYS_FREQ/(1 << OSCCONbits.PBDIV))
#define	GetInstructionClock()		(SYS_FREQ)

#if defined (__32MX340F512H__)

#define UART_MODULE_ID UART1 // use first UART.  ChipKit uC32 USB is on UART1

#endif


/* ------------------------------------------------------------ */
/*				Global Variables								*/
/* ------------------------------------------------------------ */

int pillNum;				//these variables are assigned as global so that we can use them in different functions without needing to pass them.
 int schedule[4];
int delaySeconds[4];

extern BYTE	rgbOledBmp[];

BYTE rgbBmp0[] = {
	0x81, 0x42, 0x24, 0x18, 0x18, 0x24, 0x42, 0x81,
	0x18, 0x24, 0x42, 0x81, 0x81, 0x42, 0x24, 0x18
};

int testgraph[] = {
	1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
	1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
	1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
	1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
	1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
	1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
	1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
	1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
	1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
	1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
	1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
	1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
	1, 2, 3, 4, 5, 6, 7, 8
};

BYTE rgbBmp1[32];

BYTE rgbUserFont[cbOledFontUser] = {
	0x7E, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7E,	// 0x00
	0x81, 0x42, 0x24, 0x18, 0x18, 0x24, 0x42, 0x81,	// 0x01
	0x7E, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,	// 0x02
	0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7E,	// 0x03
	0x7E, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,	// 0x04
	0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x7E,	// 0x05
	0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E,	// 0x06
	0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, // 0x07
	0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,	// 0x08
	0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,	// 0x09
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0x0A
	0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, // 0x0B
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, // 0x0C
	0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, // 0x0D
	0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,	// 0x0E
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,	// 0x0F
	0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// 0x10
	0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// 0x11
	0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x12
	0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, // 0x13
	0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, // 0x14
	0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, // 0x15
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,	// 0x16
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF	// 0x17
};

const BYTE rgbOledFont0[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,		// 0x20, space
	0x00,0x00,0x00,0x5f,0x00,0x00,0x00,0x00,		// 0x21, !
	0x00,0x00,0x03,0x00,0x03,0x00,0x00,0x00,		// 0x22, "
	0x64,0x3c,0x26,0x64,0x3c,0x26,0x24,0x00,		// 0x23, #
	0x26,0x49,0x49,0x7f,0x49,0x49,0x32,0x00,		// 0x23, $
	0x42,0x25,0x12,0x08,0x24,0x52,0x21,0x00,		// 0x25, %
	0x20,0x50,0x4e,0x55,0x22,0x58,0x28,0x00,		// 0x26, &
	0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,		// 0x27, '
	0x00,0x00,0x1c,0x22,0x41,0x00,0x00,0x00,		// 0x28, (
	0x00,0x00,0x00,0x41,0x22,0x1c,0x00,0x00,		// 0x29, )
	0x00,0x15,0x15,0x0e,0x0e,0x15,0x15,0x00,		// 0x2A, *
	0x00,0x08,0x08,0x3e,0x08,0x08,0x00,0x00,		// 0x2B, +
	0x00,0x00,0x00,0x50,0x30,0x00,0x00,0x00,		// 0x2C, ,
	0x00,0x08,0x08,0x08,0x08,0x08,0x00,0x00,		// 0x2D, -
	0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,		// 0x2E, .
	0x40,0x20,0x10,0x08,0x04,0x02,0x01,0x00,		// 0x2F, /
	0x00,0x3e,0x41,0x41,0x41,0x3e,0x00,0x00,		// 0x30, 0
	0x00,0x00,0x41,0x7f,0x40,0x00,0x00,0x00,		// 0x31, 1
	0x00,0x42,0x61,0x51,0x49,0x6e,0x00,0x00,		// 0x32, 2
	0x00,0x22,0x41,0x49,0x49,0x36,0x00,0x00,		// 0x33, 3
	0x00,0x18,0x14,0x12,0x7f,0x10,0x00,0x00,		// 0x33, 4
	0x00,0x27,0x49,0x49,0x49,0x71,0x00,0x00,		// 0x35, 5
	0x00,0x3c,0x4a,0x49,0x48,0x70,0x00,0x00,		// 0x36, 6
	0x00,0x43,0x21,0x11,0x0d,0x03,0x00,0x00,		// 0x37, 7
	0x00,0x36,0x49,0x49,0x49,0x36,0x00,0x00,		// 0x38, 8
	0x00,0x06,0x09,0x49,0x29,0x1e,0x00,0x00,		// 0x39, 9
	0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,		// 0x3A, :
	0x00,0x00,0x00,0x52,0x30,0x00,0x00,0x00,		// 0x3B, //
	0x00,0x00,0x08,0x14,0x14,0x22,0x00,0x00,		// 0x3C, <
	0x00,0x14,0x14,0x14,0x14,0x14,0x14,0x00,		// 0x3D, =
	0x00,0x00,0x22,0x14,0x14,0x08,0x00,0x00,		// 0x3E, >
	0x00,0x02,0x01,0x59,0x05,0x02,0x00,0x00,		// 0x3F, ?
	0x3e,0x41,0x5d,0x55,0x4d,0x51,0x2e,0x00,		// 0x40, @
	0x40,0x7c,0x4a,0x09,0x4a,0x7c,0x40,0x00,		// 0x41, A
	0x41,0x7f,0x49,0x49,0x49,0x49,0x36,0x00,		// 0x42, B
	0x1c,0x22,0x41,0x41,0x41,0x41,0x22,0x00,		// 0x43, C
	0x41,0x7f,0x41,0x41,0x41,0x22,0x1c,0x00,		// 0x44, D
	0x41,0x7f,0x49,0x49,0x5d,0x41,0x63,0x00,		// 0x45, E
	0x41,0x7f,0x49,0x09,0x1d,0x01,0x03,0x00,		// 0x46, F
	0x1c,0x22,0x41,0x49,0x49,0x3a,0x08,0x00,		// 0x47, G
	0x41,0x7f,0x08,0x08,0x08,0x7f,0x41,0x00,		// 0x48, H
	0x00,0x41,0x41,0x7F,0x41,0x41,0x00,0x00,		// 0x49, I
	0x30,0x40,0x41,0x41,0x3F,0x01,0x01,0x00,		// 0x4A, J
	0x41,0x7f,0x08,0x0c,0x12,0x61,0x41,0x00,		// 0x4B, K
	0x41,0x7f,0x41,0x40,0x40,0x40,0x60,0x00,		// 0x4C, L
	0x41,0x7f,0x42,0x0c,0x42,0x7f,0x41,0x00,		// 0x4D, M
	0x41,0x7f,0x42,0x0c,0x11,0x7f,0x01,0x00,		// 0x4E, N
	0x1c,0x22,0x41,0x41,0x41,0x22,0x1c,0x00,		// 0x4F, O
	0x41,0x7f,0x49,0x09,0x09,0x09,0x06,0x00,		// 0x50, P
	0x0c,0x12,0x21,0x21,0x61,0x52,0x4c,0x00,		// 0x51, Q
	0x41,0x7f,0x09,0x09,0x19,0x69,0x46,0x00,		// 0x52, R
	0x66,0x49,0x49,0x49,0x49,0x49,0x33,0x00,		// 0x53, S
	0x03,0x01,0x41,0x7f,0x41,0x01,0x03,0x00,		// 0x54, T
	0x01,0x3f,0x41,0x40,0x41,0x3f,0x01,0x00,		// 0x55, U
	0x01,0x0f,0x31,0x40,0x31,0x0f,0x01,0x00,		// 0x56, V
	0x01,0x1f,0x61,0x14,0x61,0x1f,0x01,0x00,		// 0x57, W
	0x41,0x41,0x36,0x08,0x36,0x41,0x41,0x00,		// 0x58, X
	0x01,0x03,0x44,0x78,0x44,0x03,0x01,0x00,		// 0x59, Y
	0x43,0x61,0x51,0x49,0x45,0x43,0x61,0x00,		// 0x5A, Z
	0x00,0x00,0x7f,0x41,0x41,0x00,0x00,0x00,		// 0x5B, [
	0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x00,		// 0x5C,
	0x00,0x00,0x41,0x41,0x7f,0x00,0x00,0x00,		// 0x5D, ]
	0x00,0x04,0x02,0x01,0x01,0x02,0x04,0x00,		// 0x5E, ^
	0x00,0x40,0x40,0x40,0x40,0x40,0x40,0x00,		// 0x5F, _
	0x00,0x01,0x02,0x00,0x00,0x00,0x00,0x00,		// 0x60, `
	0x00,0x34,0x4a,0x4a,0x4a,0x3c,0x40,0x00,		// 0x61, a
	0x00,0x41,0x3f,0x48,0x48,0x48,0x30,0x00,		// 0x62. b
	0x00,0x3c,0x42,0x42,0x42,0x24,0x00,0x00,		// 0x63, c
	0x00,0x30,0x48,0x48,0x49,0x3f,0x40,0x00,		// 0x63, d
	0x00,0x3c,0x4a,0x4a,0x4a,0x2c,0x00,0x00,		// 0x65, e
	0x00,0x00,0x48,0x7e,0x49,0x09,0x00,0x00,		// 0x66, f
	0x00,0x26,0x49,0x49,0x49,0x3f,0x01,0x00,		// 0x67, g
	0x41,0x7f,0x48,0x04,0x44,0x78,0x40,0x00,		// 0x68, h
	0x00,0x00,0x44,0x7d,0x40,0x00,0x00,0x00,		// 0x69, i
	0x00,0x00,0x40,0x44,0x3d,0x00,0x00,0x00,		// 0x6A, j
	0x41,0x7f,0x10,0x18,0x24,0x42,0x42,0x00,		// 0x6B, k
	0x00,0x40,0x41,0x7f,0x40,0x40,0x00,0x00,		// 0x6C, l
	0x42,0x7e,0x02,0x7c,0x02,0x7e,0x40,0x00,		// 0x6D, m
	0x42,0x7e,0x44,0x02,0x42,0x7c,0x40,0x00,		// 0x6E, n
	0x00,0x3c,0x42,0x42,0x42,0x3c,0x00,0x00,		// 0x6F, o
	0x00,0x41,0x7f,0x49,0x09,0x09,0x06,0x00,		// 0x70, p
	0x00,0x06,0x09,0x09,0x49,0x7f,0x41,0x00,		// 0x71, q
	0x00,0x42,0x7e,0x44,0x02,0x02,0x04,0x00,		// 0x72, r
	0x00,0x64,0x4a,0x4a,0x4a,0x36,0x00,0x00,		// 0x73, s
	0x00,0x04,0x3f,0x44,0x44,0x20,0x00,0x00,		// 0x73, t
	0x00,0x02,0x3e,0x40,0x40,0x22,0x7e,0x40,		// 0x75, u
	0x02,0x0e,0x32,0x40,0x32,0x0e,0x02,0x00,		// 0x76, v
	0x02,0x1e,0x62,0x18,0x62,0x1e,0x02,0x00,		// 0x77, w
	0x42,0x62,0x14,0x08,0x14,0x62,0x42,0x00,		// 0x78, x
	0x01,0x43,0x45,0x38,0x05,0x03,0x01,0x00,		// 0x79, y
	0x00,0x46,0x62,0x52,0x4a,0x46,0x62,0x00,		// 0x7A, z
	0x00,0x00,0x08,0x36,0x41,0x00,0x00,0x00,		// 0x7B, {
	0x00,0x00,0x00,0x7f,0x00,0x00,0x00,0x00,		// 0x7C, |
	0x00,0x00,0x00,0x41,0x36,0x08,0x00,0x00,		// 0x7D, }
	0x00,0x18,0x08,0x08,0x10,0x10,0x18,0x00,		// 0x7E, ~
	0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55			// 0x7F, DEL
};

const char mainMenu[] =
{
    "Select the hours when you will be taking the pills:\r\n"
};

/* ------------------------------------------------------------ */
/*				Local Variables									*/
/* ------------------------------------------------------------ */

BYTE rgbCmd[cbPageMax];
BYTE rgbBuf[cbPageMax];

/* ------------------------------------------------------------ */
/*				Forward Declarations							*/
/* ------------------------------------------------------------ */

void	DeviceInit();
void	AppInit();
void	AppTask();
void SendDataBuffer(const char *buffer, UINT32 size);
void delay(int amount);


void AppTaskMenu();
void AppTask2();
int getOption();
int getPillNum();
int getTime();
void Timer();
void Option2(int x, int y);


int main(){
    
    TRISD = 0xFFFF;
    TRISF = 0xFFFF;
    TRISE=0;
    PORTE=0;
    
    _TRISF1 = 1;        //corresponds to BTN4
    _TRISD5 = 1;        //corresponds to BTN3
    _TRISD6 = 1;        //corresponds to BTN2
    _TRISD7 = 1;        //corresponds to BTN1
    
    int option;
    int i;
    
    UARTConfigure(UART_MODULE_ID, UART_ENABLE_PINS_TX_RX_ONLY);

    UARTSetFifoMode(UART_MODULE_ID, UART_INTERRUPT_ON_TX_NOT_FULL | UART_INTERRUPT_ON_RX_NOT_EMPTY);

    UARTSetLineControl(UART_MODULE_ID, UART_DATA_SIZE_8_BITS | UART_PARITY_NONE | UART_STOP_BITS_1);

    UARTSetDataRate(UART_MODULE_ID, GetPeripheralClock(), 57600);

    UARTEnable(UART_MODULE_ID, UART_ENABLE_FLAGS(UART_PERIPHERAL | UART_RX | UART_TX));
    

	DeviceInit();
	AppInit();

     AppTask2();			//asks for the number of pills to be taken in the day and assigns it to the variable pillNum
        pillNum = getPillNum();
        OledClearBuffer();
        OledClear();
        
	while(1) {
        
       
		AppTaskMenu();
        option = getOption();
        OledClearBuffer();
        OledClear();
        
        
        
        switch(option) {
            case 1:
               
                SendDataBuffer(mainMenu, sizeof(mainMenu));
                for(i = 0; i < pillNum; i++){
                    schedule[i] = getTime();	//the integers inputted are uploaded from UART
                    
                }
            for(i = 0; i < (pillNum -1); i++){
                    delaySeconds[i] = (schedule[i+1]-schedule[i]); //fills in the array with the delays(in hours) between each pill taken.
                }
                
                break;
            case 2: //reminder
                Option2(delaySeconds[0], schedule[0]); //calls the option2 function where option 2 will be implanted, passes the first delay and first schedule integer put into realterm
                break;
                
        }     
        
	}
    return (0);
}


void AppTaskMenu() {
    OledClearBuffer();
    	OledSetCursor(0, 0);
		OledPutString("Reminder Program");
        OledSetCursor(0, 1);
		OledPutString("Choose an option:");
        OledSetCursor(0, 2);
		OledPutString("1.Upload Schedule");
        OledSetCursor(0,3);
		OledPutString("2.Remind me");
      OledUpdate();
}
void AppTask2() {
    OledClearBuffer();
    	OledSetCursor(0, 0);
		OledPutString("How many pills ");
        OledSetCursor(0, 1);
		OledPutString("will you take");
        OledSetCursor(0,2);
		OledPutString("today?");
      OledUpdate();
}

int getOption() {
    while(!PORTFbits.RF1&&!PORTDbits.RD5);
    if(PORTFbits.RF1==1)
        return 1;
    else if(PORTDbits.RD5==1)
        return 2;
    else return 0;
}
int getPillNum() {
    while(!PORTFbits.RF1 && !PORTDbits.RD5 && !PORTDbits.RD6 && !PORTDbits.RD7);
    if(PORTFbits.RF1==1)
        return 1;
    else if(PORTDbits.RD5==1)
        return 2;
    else if(PORTDbits.RD6==1)
        return 3;
    else if(PORTDbits.RD7==1)
        return 4;
    else return 0;
}

int getTime() {
    int x;
    
    while(!UARTReceivedDataIsAvailable(UART_MODULE_ID));
    x = UARTGetDataByte(UART_MODULE_ID);
    x -= '0';
    
    return (x);

}

void Option2(int x, int y) {
    
    int ib; 
    int i, j, k, l;
    int pill = 1;
    int status = 0;
    
    for(j=0;j<pillNum;j++) {			//the main for loop makes the countdown go through each number of pill and its time
        OledClearBuffer();
    
    OledSetCursor(0,0);			//the time is displayed as well as the countdown
    OledPutString("O'Clock:");
     OledSetCursor(9,0);
     OledPutChar('0' + y);
     OledSetCursor(11,0);
     OledPutString(":00");
     OledSetCursor(0,2);
     OledPutString("Countdown:");
     y = schedule[j+1];			//after each iteration of the main loop the y is changed to the next time of the next pill to be taken
        
            
            DelayMs(1100);
            
    if(pillNum != 1){        				//used so that the first delay is skipped and only used for the second iteration since the first delay is between the first second pill not before the first pill.

          for(l = 1; l < delaySeconds[j-1]; l++){
              
		OledSetCursor(10,2);
            OledPutChar('3');
            
            for (i= 6; i >= 0; i--) { 
            OledSetCursor(12,2);
            OledPutChar('0'+i);
            DelayMs(1100);
                        
        }
            OledSetCursor(10,2);
            OledPutChar('2');
            
              for (i= 9; i >= 0; i--) { 
            OledSetCursor(12,2);
            OledPutChar('0'+i);
            DelayMs(1100);
                        
        }  
            OledSetCursor(10,2);
            OledPutChar('1');
            
              for (i= 9; i >= 0; i--) { 
            OledSetCursor(12,2);
            OledPutChar('0'+i);
            DelayMs(1100);
                        
        }  
            OledSetCursor(10,2);
            OledPutChar('0');
              for (i= 9; i >= 0; i--) { 
            OledSetCursor(12,2);
            OledPutChar('0'+i);
            DelayMs(1100);
                        
        }  
	
           }
    }
    
        OledSetCursor(10,2);
            OledPutChar('3');
            
            for (i= 6; i >= 0; i--) { 
            OledSetCursor(12,2);
            OledPutChar('0'+i);
            DelayMs(1100);
                        
        }
            OledSetCursor(10,2);
            OledPutChar('2');
            
              for (i= 9; i >= 0; i--) { 
            OledSetCursor(12,2);
            OledPutChar('0'+i);
            DelayMs(1100);
                        
        }  
            OledSetCursor(10,2);
            OledPutChar('1');
            
              for (i= 9; i >= 0; i--) { 
            OledSetCursor(12,2);
            OledPutChar('0'+i);
            DelayMs(1100);
                        
        }  
            OledSetCursor(10,2);
            OledPutChar('0');
              for (i= 9; i >= 0; i--) { 
            OledSetCursor(12,2);
            OledPutChar('0'+i);
            DelayMs(1100);
                        
        }  
    
        
            switch(pill) {			//4 switch cases for the max 4 pills to be taken 
                case 1: 
                    for(k=0;k<1000000;k++) {
                    if(PORTDbits.RD8==1) {			//if once the countdown is finished and the switch is on for the respective pill make the status 1
                        status = 1;
                    }
                    }
                    if(status==0) {		//if the status is 1 meaning switch is on then skip this if not then show that pills was not taken on OLED ….
                        OledClearBuffer();
                        OledClear();
                        OledSetCursor(0,1);
                        OledPutString("Whoops pill 1");
                        OledSetCursor(0,2);
                        OledPutString("was not taken");
                        for(k=0;k<10;k++) {			//…and flash leds. ALL the cases use the same case staments for different switches
                            PORTE=0xFFFF;
                            DelayMs(100);
                            PORTE=0;
                            DelayMs(100);
                        }
                    }
                    break;
                case 2:
                     for(k=0;k<1000000;k++) {
                    if(PORTDbits.RD9==1) {
                        status = 1;
                    }
                    }
                    if(status==0) {
                        OledClearBuffer();
                        OledClear();
                        OledSetCursor(0,1);
                        OledPutString("Whoops pill 2");
                        OledSetCursor(0,2);
                        OledPutString("was not taken");
                        for(k=0;k<10;k++) {
                            PORTE=0xFFFF;
                            DelayMs(100);
                            PORTE=0;
                            DelayMs(100);
                        }
                    }
                    break;
                case 3: 
                     for(k=0;k<1000000;k++) {
                    if(PORTDbits.RD10==1) {
                        status = 1;
                    }
                    }
                    if(status==0) {
                        OledClearBuffer();
                        OledClear();
                        OledSetCursor(0,1);
                        OledPutString("Whoops pill 3");
                        OledSetCursor(0,2);
                        OledPutString("was not taken");
                        for(k=0;k<10;k++) {
                            PORTE=0xFFFF;
                            DelayMs(100);
                            PORTE=0;
                            DelayMs(100);
                        }
                    }
                    break;
                case 4:
                     for(k=0;k<1000000;k++) {
                    if(PORTDbits.RD11==1) {
                        status = 1;
                    }
                    }
                    if(status==0) {
                        OledClearBuffer();
                        OledClear();
                        OledSetCursor(0,1);
                        OledPutString("Whoops pill 4");
                        OledSetCursor(0,2);
                        OledPutString("was not taken");
                        for(k=0;k<10;k++) {
                            PORTE=0xFFFF;
                            DelayMs(100);
                            PORTE=0;
                            DelayMs(100);
                        }
                    }
                    break;        
                }
            
                pill++;
            
            status = 0;
            }
            
            }
            
void
DeviceInit()
	{

	DelayInit();
	OledInit();
}

void SendDataBuffer(const char *buffer, UINT32 size)
{
    while(size)
    {
        while(!UARTTransmitterIsReady(UART_MODULE_ID))
            ;

        UARTSendDataByte(UART_MODULE_ID, *buffer);

        buffer++;
        size--;
    }

    while(!UARTTransmissionHasCompleted(UART_MODULE_ID))
        ;
}

void
AppInit()
	{
	char	ch;

	OledInit();
	OledClear();

	/* Define the user definable characters
	*/
	for (ch = 0; ch < 0x18; ch++) {
		OledDefUserChar(ch, &rgbUserFont[ch*cbOledChar]);
	}

}

void delay(int amount)
{
    int i=0;

    while(i<(amount*1000))
    {
        i++;
    }
}

void
DelayInit()
	{
	unsigned int tcfg;

	/* Configure Timer 1. This sets it up to count a 10Mhz.
	*/
	tcfg = T1_ON|T1_IDLE_CON|T1_SOURCE_INT|T1_PS_1_8|T1_GATE_OFF|T1_SYNC_EXT_OFF;
	OpenTimer1(tcfg, 0xFFFF);

}

void
DelayMs(int cms)
	{
	int		ims;

	for (ims=0; ims<cms; ims++) {
		WriteTimer1(0);
		while (ReadTimer1() < cntMsDelay);
	}

}
